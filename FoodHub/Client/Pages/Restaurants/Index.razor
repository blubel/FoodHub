@page "/restaurants"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize] 

<h3>Restaurant</h3>

@if (Restaurants == null)
    {   
     <div class="alert alert-info">Loading Restaurants...</div>
    }
else
     {
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var restaurant in Restaurants)
                {
                <tr>
                    <td>@restaurant.Name</td>
                    <td>
                        <a href="/restaurants/view/@restaurant.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>

                        </a>
                    </td>
                </tr>
                }
            </tbody>
        </table>
     }


<br />
@code {
    private List<Restaurant> Restaurants;

    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{ Endpoints.RestaurantsEndpoint}");
    }
    async Task Delete(int restaurantId)
    {
        var restaurant = Restaurants.First(q => q.Id == restaurantId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {restaurant.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.RestaurantsEndpoint}/{restaurantId}");
            await OnInitializedAsync();
        }
    }

}
