@page "/restaurants/view/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Index</h3>

@if (RestaurantItems == null)
{
    <div class="alert alert-info">Loading Restaurant Items...</div>
}
else
{
<table class="table table-responsive">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var restaurantitem in RestaurantItems)
        {
        <tr>
            <td>@restaurantitem.Description</td>
            <td>@restaurantitem.Cost</td>

            <td>
                <a href="/restaurants/view/1" class="btn btn-primary">
                    <span class="oi oi-book"></span>

                </a>
            </td>
        </tr>
    }
        </tbody>
    </table>
}


<br />
@code {
    private List<Restaurant> Restaurants;
    private List<RestaurantItem> RestaurantItems;


    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{ Endpoints.RestaurantsEndpoint}");
        RestaurantItems = await _client.GetFromJsonAsync<List<RestaurantItem>>($"{ Endpoints.RestaurantItemsEndpoint}");

    }
    async Task Delete(int restaurantId)
    {
        var restaurant = Restaurants.First(q => q.Id == restaurantId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {restaurant.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.RestaurantsEndpoint}/{restaurantId}");
            await OnInitializedAsync();
        }
    }

}
